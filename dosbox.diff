Index: src/misc/cross.cpp
===================================================================
--- src/misc/cross.cpp	(revision 3850)
+++ src/misc/cross.cpp	(working copy)
@@ -61,6 +61,8 @@
 #elif defined(MACOSX)
 	in = "~/Library/Preferences";
 	ResolveHomedir(in);
+#elif defined(__native_client__)
+	in = "/config";
 #else
 	in = "~/.dosbox";
 	ResolveHomedir(in);
@@ -88,6 +90,9 @@
 	in = "~/Library/Preferences/";
 	ResolveHomedir(in);
 	//Don't create it. Assume it exists
+#elif defined(__native_client__)
+	in = "/config";
+	mkdir(in.c_str(),0700);
 #else
 	in = "~/.dosbox";
 	ResolveHomedir(in);
Index: src/ints/bios.cpp
===================================================================
--- src/ints/bios.cpp	(revision 3850)
+++ src/ints/bios.cpp	(working copy)
@@ -490,11 +490,10 @@
 
 static void BIOS_HostTimeSync() {
 	/* Setup time and date */
-	struct timeb timebuffer;
-	ftime(&timebuffer);
-	
+	time_t curtime;
 	struct tm *loctime;
-	loctime = localtime (&timebuffer.time);
+	curtime = time (NULL);
+	loctime = localtime (&curtime);
 
 	/*
 	loctime->tm_hour = 23;
@@ -512,8 +511,8 @@
 	Bit32u ticks=(Bit32u)(((double)(
 		loctime->tm_hour*3600*1000+
 		loctime->tm_min*60*1000+
-		loctime->tm_sec*1000+
-		timebuffer.millitm))*(((double)PIT_TICK_RATE/65536.0)/1000.0));
+		loctime->tm_sec*1000
+		))*(((double)PIT_TICK_RATE/65536.0)/1000.0));
 	mem_writed(BIOS_TIMER,ticks);
 }
 
Index: src/gui/sdl_mapper.cpp
===================================================================
--- src/gui/sdl_mapper.cpp	(revision 3850)
+++ src/gui/sdl_mapper.cpp	(working copy)
@@ -359,8 +359,13 @@
    expression will raise a compiler error if the condition is false.  */
 typedef char assert_right_size [MAX_SCANCODES == (sizeof(sdlkey_map)/sizeof(sdlkey_map[0]))	? 1 : -1];
 
-#else // !MACOSX
+#elif defined(__native_client__)
 
+#define MAX_SCANCODES 256
+extern SDLKey sdlkey_map[MAX_SCANCODES];
+
+#else // !MACOSX && !__native_client__
+
 #define MAX_SCANCODES 212
 static SDLKey sdlkey_map[MAX_SCANCODES]={SDLK_UNKNOWN,SDLK_ESCAPE,
 	SDLK_1,SDLK_2,SDLK_3,SDLK_4,SDLK_5,SDLK_6,SDLK_7,SDLK_8,SDLK_9,SDLK_0,
@@ -414,7 +419,8 @@
 			/* try to retrieve key from symbolic key as scancode is zero */
 			if (keysym.sym<MAX_SDLKEYS) key=scancode_map[(Bitu)keysym.sym];
 		} 
-#if !defined (WIN32) && !defined (MACOSX) && !defined(OS2)
+#if !defined (WIN32) && !defined (MACOSX) && !defined(OS2) && \
+		!defined(__native_client__)
 		/* Linux adds 8 to all scancodes */
 		else key-=8;
 #endif
@@ -2407,7 +2413,7 @@
 		usescancodes=true;
 
 		/* Note: table has to be tested/updated for various OSs */
-#if defined (MACOSX)
+#if defined (MACOSX) || defined(__native_client__)
 		/* nothing */
 #elif defined(OS2)
 		sdlkey_map[0x61]=SDLK_UP;
Index: src/gui/sdlmain.cpp
===================================================================
--- src/gui/sdlmain.cpp	(revision 3850)
+++ src/gui/sdlmain.cpp	(working copy)
@@ -53,9 +53,15 @@
 #define MAPPERFILE "mapper-" VERSION ".map"
 //#define DISABLE_JOYSTICK
 
+#ifdef __native_client__
+#undef C_OPENGL
+#define C_OPENGL 1
+#endif
+
 #if C_OPENGL
 #include "SDL_opengl.h"
 
+#ifndef __native_client__
 #ifndef APIENTRY
 #define APIENTRY
 #endif
@@ -87,6 +93,7 @@
 PFNGLBUFFERDATAARBPROC glBufferDataARB = NULL;
 PFNGLMAPBUFFERARBPROC glMapBufferARB = NULL;
 PFNGLUNMAPBUFFERARBPROC glUnmapBufferARB = NULL;
+#endif // __native_client__
 
 #endif //C_OPENGL
 
@@ -175,6 +182,10 @@
 	} desktop;
 #if C_OPENGL
 	struct {
+#ifdef __native_client__
+		GLfloat tex_width;
+		GLfloat tex_height;
+#endif // __native_client__
 		Bitu pitch;
 		void * framebuf;
 		GLuint buffer;
@@ -403,6 +414,7 @@
 static SDL_Surface * GFX_SetupSurfaceScaled(Bit32u sdl_flags, Bit32u bpp) {
 	Bit16u fixedWidth;
 	Bit16u fixedHeight;
+	static bool set_video_mode_once;
 
 	if (sdl.desktop.fullscreen) {
 		fixedWidth = sdl.desktop.full.fixed ? sdl.desktop.full.width : 0;
@@ -439,7 +451,14 @@
 		sdl.clip.x=0;sdl.clip.y=0;
 		sdl.clip.w=(Bit16u)(sdl.draw.width*sdl.draw.scalex);
 		sdl.clip.h=(Bit16u)(sdl.draw.height*sdl.draw.scaley);
-		sdl.surface=SDL_SetVideoMode(sdl.clip.w,sdl.clip.h,bpp,sdl_flags);
+		if (!set_video_mode_once) {
+			// TODO(clchiou): Figure out why if we call
+			//   SDL_SetVideoMode
+			// more than once here (or anywhere?), we will have
+			// no display.
+			sdl.surface=SDL_SetVideoMode(sdl.clip.w,sdl.clip.h,bpp,sdl_flags);
+			set_video_mode_once = true;
+		}
 		return sdl.surface;
 	}
 }
@@ -454,6 +473,26 @@
 	}
 }
 
+#ifdef __native_client__
+static void GFX_BindTexture() {
+	glBindTexture(GL_TEXTURE_2D, sdl.opengl.texture);
+	glBegin(GL_QUADS);
+	// lower left
+	glTexCoord2f(0, sdl.opengl.tex_height);
+	glVertex2f(-1.0f,-1.0f);
+	// lower right
+	glTexCoord2f(sdl.opengl.tex_width, sdl.opengl.tex_height);
+	glVertex2f(1.0f, -1.0f);
+	// upper right
+	glTexCoord2f(sdl.opengl.tex_width, 0);
+	glVertex2f(1.0f, 1.0f);
+	// upper left
+	glTexCoord2f(0,0);
+	glVertex2f(-1.0f, 1.0f);
+	glEnd();
+}
+#endif // __native_client__
+
 Bitu GFX_SetSize(Bitu width,Bitu height,Bitu flags,double scalex,double scaley,GFX_CallBack_t callback) {
 	if (sdl.updating)
 		GFX_EndUpdate( 0 );
@@ -671,6 +710,11 @@
 		GLfloat tex_width=((GLfloat)(width)/(GLfloat)texsize);
 		GLfloat tex_height=((GLfloat)(height)/(GLfloat)texsize);
 
+#ifdef __native_client__
+		sdl.opengl.tex_width = tex_width;
+		sdl.opengl.tex_height = tex_height;
+#endif // __native_client__
+
 		if (glIsList(sdl.opengl.displaylist)) glDeleteLists(sdl.opengl.displaylist, 1);
 		sdl.opengl.displaylist = glGenLists(1);
 		glNewList(sdl.opengl.displaylist, GL_COMPILE);
@@ -934,7 +978,11 @@
 					sdl.draw.width, sdl.draw.height, GL_BGRA_EXT,
 					GL_UNSIGNED_INT_8_8_8_8_REV, 0);
 			glBindBufferARB(GL_PIXEL_UNPACK_BUFFER_EXT, 0);
+#ifdef __native_client__
+			GFX_BindTexture();
+#else
 			glCallList(sdl.opengl.displaylist);
+#endif // __native_client__
 			SDL_GL_SwapBuffers();
 		} else if (changedLines) {
 			Bitu y = 0, index = 0;
@@ -952,7 +1000,11 @@
 				}
 				index++;
 			}
+#ifdef __native_client__
+			GFX_BindTexture();
+#else
 			glCallList(sdl.opengl.displaylist);
+#endif // __native_client__
 			SDL_GL_SwapBuffers();
 		}
 		break;
@@ -1242,12 +1294,14 @@
 	sdl.opengl.texture=0;
 	sdl.opengl.displaylist=0;
 	glGetIntegerv (GL_MAX_TEXTURE_SIZE, &sdl.opengl.max_texsize);
+#ifndef __native_client__
 	glGenBuffersARB = (PFNGLGENBUFFERSARBPROC)SDL_GL_GetProcAddress("glGenBuffersARB");
 	glBindBufferARB = (PFNGLBINDBUFFERARBPROC)SDL_GL_GetProcAddress("glBindBufferARB");
 	glDeleteBuffersARB = (PFNGLDELETEBUFFERSARBPROC)SDL_GL_GetProcAddress("glDeleteBuffersARB");
 	glBufferDataARB = (PFNGLBUFFERDATAARBPROC)SDL_GL_GetProcAddress("glBufferDataARB");
 	glMapBufferARB = (PFNGLMAPBUFFERARBPROC)SDL_GL_GetProcAddress("glMapBufferARB");
 	glUnmapBufferARB = (PFNGLUNMAPBUFFERARBPROC)SDL_GL_GetProcAddress("glUnmapBufferARB");
+#endif // __native_client__
 	const char * gl_ext = (const char *)glGetString (GL_EXTENSIONS);
 	if(gl_ext && *gl_ext){
 		sdl.opengl.packed_pixel=(strstr(gl_ext,"EXT_packed_pixels") > 0);
@@ -1899,7 +1953,10 @@
 	 */
 	putenv(const_cast<char*>("SDL_DISABLE_LOCK_KEYS=1"));
 #endif
-	if ( SDL_Init( SDL_INIT_AUDIO|SDL_INIT_VIDEO|SDL_INIT_TIMER|SDL_INIT_CDROM
+	if ( SDL_Init( SDL_INIT_AUDIO|SDL_INIT_VIDEO|SDL_INIT_TIMER
+#ifndef __native_client__
+		|SDL_INIT_CDROM
+#endif
 		|SDL_INIT_NOPARACHUTE
 		) < 0 ) E_Exit("Can't init SDL %s",SDL_GetError());
 	sdl.inited = true;
Index: src/cpu/core_dyn_x86/risc_x86.h
===================================================================
--- src/cpu/core_dyn_x86/risc_x86.h	(revision 3850)
+++ src/cpu/core_dyn_x86/risc_x86.h	(working copy)
@@ -133,7 +133,11 @@
 		"pushl %%ebp						\n"
 		"pushl $(run_return_adress)			\n"
 		"pushl  %2							\n"
+#ifndef __native_client__
 		"jmp  *%3							\n"
+#else
+		"nacljmp  %3							\n"
+#endif
 		"run_return_adress:					\n"
 		"popl %%ebp							\n"
 		:"=a" (retval), "=c" (tempflags)
Index: src/cpu/cpu.cpp
===================================================================
--- src/cpu/cpu.cpp	(revision 3850)
+++ src/cpu/cpu.cpp	(working copy)
@@ -22,7 +22,9 @@
 #include <stddef.h>
 #include "dosbox.h"
 #include "cpu.h"
-#include "memory.h"
+#ifndef __native_client__
+#  include "memory.h"
+#endif
 #include "debug.h"
 #include "mapper.h"
 #include "setup.h"
